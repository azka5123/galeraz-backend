generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  username   String   @unique
  role       String   @default("User")
  address    String
  email      String   @unique
  password   String
  tokens     Token[]
  posts      Post[]
  albums     Album[]
  likes      Like[]
  comments   Comment[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Token {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  token      String
  expiresAt  DateTime
  scope      String
  user       User     @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Post {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  title        String
  albumId      String?
  description  String
  image        String
  imageUrl     String
  user         User     @relation(fields: [userId], references: [id])
  album        Album?   @relation(fields: [albumId], references: [id], name: "PostAlbumRelation")
  likes        Like[]
  comments     Comment[]
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Album {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  name        String
  description String
  posts       Post[]   @relation("PostAlbumRelation") 
  user        User     @relation(fields: [userId], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String     @db.ObjectId
  postId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  post      Post       @relation(fields: [postId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}